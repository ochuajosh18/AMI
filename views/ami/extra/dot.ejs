<!DOCTYPE html>
<html>
<%- include ../../partials/head.ejs %>
<style type="text/css">
/* input[type="file"] */
.btn-file { position: relative; overflow: hidden; }
.btn-file input[type=file] { position: absolute; top: 0; right: 0; min-width: 100%; min-height: 100%; font-size: 100px; text-align: right; filter: alpha(opacity=0); opacity: 0; outline: none; cursor: inherit; display: block; }
</style>
<body class="hold-transition skin-black sidebar-mini fixed">
	<div class="wrapper">
		<%- include ../../partials/navbar.ejs %>
		<%- include ../../partials/sidebar.ejs %>
		<div class="content-wrapper">
			<section class="content-header">
				<h1><b>DOT</b>
					<a href="#" id="btn-help" data-html="true" data-toggle="popover" data-trigger="focus" style="padding-left: 20px;"><i class="fa fa-question-circle"></i></a>
				</h1>

				<ol class="breadcrumb">
					<li><a href="#"><i class="fa fa-wrench"></i>Settings</a></li>
					<li><a href="#"></a>DOT</li>
				</ol>
			</section>

			<section class="content">
				<div class="row">
					<div class="col-lg-12">
						<div class="box box-solid">
							<div class="box-body small-font">
								<form id="customer-form" class="form-inline">
									<div class="form-group">
										<input type="text" id="material-filter" class="form-control small-font input-sm" placeholder="Search">
									</div>

									<div class="form-group">
										<span class="btn btn-warning btn-file btn-sm btn-flat btn-block">
											<i class="fa fa-search"></i> Browse <input type="file" id="fileUpload" accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" multiple>
										</span>
									</div>

									<div class="form-group">
										<button id="upload-btn" class="btn btn-success btn-sm btn-flat btn-block" type="button"><i class="fa fa-upload small-font"></i> <span data-translate="true" class="small-font">Upload</span></button>
									</div>
								</form>
								
								<!-- <input type="button" id="upload" value="Upload" /> -->
								<div class="row">
									<div class="col-lg-12">
										<table class="table table-bordered table-hover table-condensed table-responsive nowrap datatable" id="material-table"></table>
									</div>
								</div>
							</div>

							<!-- <div class="overlay loading-state">
								<i class="fa fa-spinner fa-spin"></i>
							</div> -->
						</div>
					</div>
				</div>
			</section>
		</div>

		<%- include ../../partials/footer.ejs %>
		<%- include ../../partials/settings.ejs %>
  	<div class="control-sidebar-bg"></div>

  	<!-- Modals -->

  	<div class="modal fade bs-example-modal-lg" id="modal-default" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
  		<div class="modal-dialog modal-lg" role="document">
  			<div class="modal-content">
  				<div class="modal-header">
  					<button type="button" class="close" data-dismiss="modal" aria-label="Close"><spanaria-hidden="true">Ã—</span></button>
  					<h4 class="modal-title">Help <i class="fa fa-question-circle" style="font-size: 15px;" aria-hidden="true"></i></h4>
  				</div>
  				<div class="modal-body no-padding">

	  				<div id="carousel-example-generic" class="carousel slide" data-ride="carousel">
	  					<ol class="carousel-indicators">
	  						<li data-target="#myCarousel" data-slide-to="0" class="active"></li>
	  						<li data-target="#myCarousel" data-slide-to="1"></li>
	  					</ol>
	  					<div class="carousel-inner">
	  						<div class="item active">
	  							<img class="img-responsive" src="#" alt="...">
	  							<div class="carousel-caption">
	  								One Image
	  							</div>
	  						</div>
	  						<div class="item">
	  							<img class="img-responsive" src="#" alt="...">
	  							<div class="carousel-caption">
	  								Another Image
	  							</div>
	  						</div>
	  					</div>
	  					<a class="left carousel-control" href="#carousel-example-generic" data-slide="prev">
	  						<span class="fa fa-angle-left"></span>
	  					</a>
	  					<a class="right carousel-control" href="#carousel-example-generic" data-slide="next">
	  						<span class="fa fa-angle-right"></span>
	  					</a>
	  				</div>
	  				
  				</div>
  				<!-- <div class="modal-footer">
  					<button type="button" class="btn btn-danger pull-right" data-dismiss="modal">Close</button>
  				</div> -->
  			</div>
  		</div>
  	</div>

  </div>

  <%- include ../../partials/scripts.ejs %>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.7.7/xlsx.core.min.js"></script>  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xls/0.7.4-a/xls.core.min.js"></script>  
  <script type="text/javascript" src="../../../dist/js/model.js"></script>
  <script type="text/javascript" src="../../../dist/js/myFunctions.js"></script>
  <script>
		$(document).ready(function () {
			let LCLDB_MATERIAL, DT_MATERIAL;

			$('#material-table').DataTable({ destroy : true, data : [],
				columns: [ { title: 'BPC'}, { title: 'Quantity'}, { title: 'DOT'}, { title: 'On material<br>master data'} ],
				autoWidth: false, scrollX: true, dom : 'rti' });

			loadAllMaterial((err, res) => {
				if (err || res.statusCode >= 300) { end = true; return };

				if (res.statusCode <= 299) { 
					LCLDB_MATERIAL = res.result;
					LCLDB_MATERIAL = LCLDB_MATERIAL.map(material => material.materialCode);
				}
			});

			// console.log(JSON.stringify(LCLDB_MATERIAL, '', 4));

			$("#fileUpload").on('change', function() {
				// Reference the FileUpload element.
				var fileUpload = $("#fileUpload")[0];

				// Validate whether File is valid Excel file.
				var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.xls|.xlsx)$/;
				if (regex.test(fileUpload.value.toLowerCase())) {
					if (typeof (FileReader) != "undefined") { var reader = new FileReader(); }

					//For Browsers other than IE.
					if (reader.readAsBinaryString) {
						reader.onload = function (e) { ProcessExcel(e.target.result); };
						reader.readAsBinaryString(fileUpload.files[0]);
					}
				}
			});

			let DOTdoc = {};

			function ProcessExcel(data) {
				let workbook = XLSX.read(data, { type: 'binary' }); // Read the Excel File data.
				let firstSheet = workbook.SheetNames[0]; // Fetch the name of First Sheet.
				let excelRows = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[firstSheet]); // Read all rows from First Sheet into an JSON array.

				let excelCols = Object.keys(excelRows[0]);
				const reqCols = ['Item_Cx', 'Sum of Pkgx', 'DOT YEAR'];
				let missingCols = [];
				for (let i in reqCols) {
					// console.log(reqCols[i], excelCols.indexOf(reqCols[i]));
					if (excelCols.indexOf(reqCols[i]) == -1) missingCols.push(reqCols[i]);
				}

				if (missingCols.length) {
					alert(`${missingCols} \ncolumn/s missing on excel file.`);
					return;
				}
				
				alert('Power');
				// for (let i in excelCols) {
				// 	const col = excelCols[i];
				// }


				excelRows.forEach(material => {
					if (LCLDB_MATERIAL.indexOf(material['Item_C']) != -1) material.valid = true;

					// if (DOTdoc[material['Item_C']]) {
					// 	if (DOTdoc[material['Item_C']][material['DOT YEAR']]) {
					// 		let existingStock = parseInt(DOTdoc[material['Item_C']][material['DOT YEAR']]);
					// 		DOTdoc[material['Item_C']][material['DOT YEAR']] = (existingStock + parseInt(material['Sum of Pkg'])).toString();
					// 	} else {
					// 		DOTdoc[material['Item_C']][material['DOT YEAR']] = material['Sum of Pkg']
					// 	}
					// } else {
					// 	DOTdoc[material['Item_C']] = {};
					// 	DOTdoc[material['Item_C']][material['DOT YEAR']] = material['Sum of Pkg']
					// }
				});

				// console.log(DOTdoc, Object.keys(DOTdoc).length, excelRows.length);
				// console.log(JSON.stringify(DOTdoc, '', 4));
				DT_MATERIAL = $('#material-table').DataTable({
					destroy        : true,
					data           : excelRows.filter(material => material.valid),
					order          : [[3, 'desc']],
					autoWidth      : false,
					scrollX        : true,
					scrollY        : 350,
					scrollCollapse : true,
					paging         : false,
					dom            : 'rti',

					columns: [
						{ data: 'Item_C', title: 'BPC', defaultContent: 'NONE'},
						{ data: 'Sum of Pkg', title: 'Quantity', defaultContent: 'NONE'},
						{ data: 'DOT YEAR', title: 'DOT', defaultContent: 'NONE'},
						{ data: 'valid', title: 'On material<br>master data'}
					],

					columnDefs: [
						{ targets: [1, 2], className: 'dt-center'},
						{ 
							targets: 3, className: 'dt-center',
							render: (data, type, row) => `<i class="fa ${data ? 'fa-check text-green' : 'fa-times text-red'}" aria-hidden="true"></i>`
						}
					]
				});

				$('#material-filter').keyup(function(){ DT_MATERIAL.search($(this).val()).draw(); });
			}
		});
			

	</script>
</body>
</html>